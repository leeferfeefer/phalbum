[{"/Users/leefer_feefer/workspace/phalbum/src/reportWebVitals.js":"1","/Users/leefer_feefer/workspace/phalbum/src/App.js":"2","/Users/leefer_feefer/workspace/phalbum/src/index.js":"3"},{"size":362,"mtime":1610047647905,"results":"4","hashOfConfig":"5"},{"size":1648,"mtime":1610057670248,"results":"6","hashOfConfig":"5"},{"size":500,"mtime":1610047647904,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1w4n0hz",{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/leefer_feefer/workspace/phalbum/src/reportWebVitals.js",[],"/Users/leefer_feefer/workspace/phalbum/src/App.js",["15","16"],"import React, {useState, useEffect} from 'react';\nimport FileBase64 from 'react-file-base64';\nimport AxiosService from './service/Axios.service';\nimport Loader from \"react-loader-spinner\";\n\nfunction App() {\n  const [images, setImages] = useState([]);\n  const [isLoaderVisible, setIsLoaderVisible] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n\n  const getImages = async (images) => {\n    \n    setIsLoaderVisible(true);\n    const isSuccessful = await AxiosService.uploadImages(images);\n    setIsLoaderVisible(false);\n\n    // show message\n    if (isSuccessful) {\n      setImages(images);\n      setIsError(false);    \n    } else {\n      setIsError(true);    \n    }\n  }\n\n  const renderImages = () => {\n    return images.map((image, index) => {\n      return <img src={image.base64} alt={`image-${index}`} className=\"image\"/>\n    });\n  }\n\n  return (\n    <div className=\"container\">\n      <h3 className=\"heading\">Phalbum</h3>\n      <div className=\"image-container\">    \n        <h4 className=\"subheader\">Upload Image</h4>\n        <div className=\"files\">\n          <FileBase64 type=\"file\" multiple={true} onDone={getImages} />\n        </div>\n        <br/>\n        {isLoaderVisible && \n          <Loader\n            type=\"Puff\"\n            color=\"#00BFFF\"\n            height={100}\n            width={100}        \n          />\n        }\n        {!isError ?\n          <> \n            <div className=\"images\">\n              You uploaded:\n            </div>\n            {renderImages()}\n          </>\n          :\n          <div style={{color: 'red'}}> Error! Try again.</div>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/leefer_feefer/workspace/phalbum/src/index.js",[],{"ruleId":"17","severity":1,"message":"18","line":1,"column":26,"nodeType":"19","messageId":"20","endLine":1,"endColumn":35},{"ruleId":"21","severity":1,"message":"22","line":29,"column":14,"nodeType":"23","endLine":29,"endColumn":80},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You donâ€™t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","JSXOpeningElement"]